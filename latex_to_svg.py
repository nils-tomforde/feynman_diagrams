
import io

import matplotlib.pyplot as plt

import xml_handler

# TODO: Try the following for additional packages
# plt.rc("text", usetex=True)
# plt.rc("text.latex", preamble=r"\usepackage{amsmath} \usepackage{foo-name} `...")
# matplotlib.verbose.level = "debug-annoying"  # for debugging


def mpl_generate_latex(formula: str, fontsize: float = 12, color_rgb_256: tuple[float, float, float] = (0, 0, 0)) -> str:
    # plt.rc("svg", fonttype="path")
    plt.rc("mathtext", fontset="cm")  # set font to computer modern

    color_rgb_1 = (
        (color_rgb_256[0] + 1) / 256,
        (color_rgb_256[1] + 1) / 256,
        (color_rgb_256[2] + 1) / 256
    )

    fig = plt.figure()
    fig.text(0, 0, rf"${formula}$", fontsize=fontsize, color=color_rgb_1)

    output = io.StringIO()
    fig.savefig(output, transparent=True, format="svg", bbox_inches="tight", pad_inches=0.0)
    plt.close(fig)

    return output.getvalue()


def latex_to_svg(formula: str,
                 fontsize: float = 12,
                 color_rgb_256: tuple[float, float, float] = (0, 0, 0),
                 x: float = 0,
                 y: float = 0,
                 phi: float = 0,
                 center: bool = True) -> xml_handler.Tag:

    svg_string = mpl_generate_latex(formula=formula, fontsize=fontsize, color_rgb_256=color_rgb_256)

    root_tag = xml_handler.read_xml(svg_string)

    if center:
        width_pt = root_tag.attributes["width"]
        height_pt = root_tag.attributes["height"]
        # The values in the svg generated by matplotlib are in points (pt)
        # But in this method only the children of the svg tag are used (which do not specify the unit)
        # Hence, the numeric values in pt are now in pixels (px) and are handled as such

        width = float(width_pt.removesuffix("pt"))  # Now without unit but implicitly in px
        height = float(height_pt.removesuffix("pt"))

        x -= width/2
        y -= height/2

    xml_handler.remove_children_by_tag_name_recursive(root_tag, ["metadata", "style"])

    if phi != 0:
        attributes = {
            "transform": f'translate({x},{y}) rotate{phi}'
        }
    else:
        attributes = {
            "transform": f'translate({x},{y})'
        }

    latex_tag = xml_handler.Tag(tag_name="g", attributes=attributes, content="", children=root_tag.children, is_empty=False)

    return latex_tag

